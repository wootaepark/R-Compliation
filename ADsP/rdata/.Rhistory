original_phi <- c(2.6, -3.34, 2.46, -0.9024)
for (criterion in criteria) {
for (method in methods) {
if (results[criterion, method] != 4) {
cat(sprintf("\nModel with %s and %s did not select AR(4):\n", criterion, method))
model_fit <- est.arma.wge(x, p = results[criterion, method], type = method)
print(model_fit)
cat("Original model factors:\n")
print(factor.wge(phi = original_phi))
cat("Identified model factors:\n")
print(factor.wge(phi = model_fit$phi))
}
}
}
for (criterion in criteria) {
for (method in methods) {
if (results[criterion, method] != 4) {
cat(sprintf("\nModel with %s and %s did not select AR(4):\n", criterion, method))
model_fit <- est.ar.wge(x, p = results[criterion, method], method = method)
print(model_fit)
cat("Original model factors:\n")
print(factor.wge(phi = original_phi))
cat("Identified model factors:\n")
print(factor.wge(phi = model_fit$phi))
}
}
}
library(tswge)
# 데이터 로드
data("patemp")
# 데이터 플롯
plot(patemp, type = "o", main = "Average Monthly Temperature in PA", ylab = "Temperature (F)", xlab = "Time")
# 샘플 자기상관 플롯
acf(patemp, main = "Sample Autocorrelation of patemp")
spec.pgram(patemp, spans = c(5, 5), taper = 0.1, log = "no", main = "Parzen Spectral Density Estimate")
burg_14 <- est.ar.wge(patemp, p = 14, method = "burg")
burg_16 <- est.ar.wge(patemp, p = 16, method = "burg")
burg_18 <- est.ar.wge(patemp, p = 18, method = "burg")
print(burg_14)
print(burg_16)
print(burg_18)
# 1 − B^12로 차분
diff_12 <- diff(patemp, lag = 12)
# 차분된 데이터 플롯
plot(diff_12, type = "o", main = "Differenced (1 - B^12) Data", ylab = "Differenced Temperature", xlab = "Time")
# 차분된 데이터의 샘플 자기상관 플롯
acf(diff_12, main = "Sample Autocorrelation of Differenced Data")
# 차분된 데이터의 파젠 스펙트럴 밀도 추정 플롯
spec.pgram(diff_12, spans = c(5, 5), taper = 0.1, log = "no", main = "Parzen Spectral Density Estimate of Differenced Data")
sarima_model <- arima(patemp, order = c(1, 0, 1), seasonal = list(order = c(1, 1, 0), period = 12))
print(sarima_model)
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * forecasts$se, col = "red", lty = 2)
lines(time_index, forecasts$pred - 1.96 * forecasts$se, col = "red", lty = 2)
legend("topright", legend = c("Observed", "Forecast", "95% Confidence Interval"), col = c("black", "blue", "red"), lty = c(1, 1, 2))
4
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
lines(time_index, forecasts$pred - 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
matlines(time_index, cbind(forecasts$pred, forecasts$pred + 1.96 * sqrt(forecasts$se^2), forecasts$pred - 1.96 * sqrt(forecasts$se^2)), col = c("blue", "red", "red"), lty = c(1, 2, 2))
legend("topright", legend = c("Observed", "Forecast", "95% Confidence Interval"), col = c("black", "blue", "red"), lty = c(1, 1, 2))
sarima_model <- arima(patemp, order = c(1, 0, 1), seasonal = list(order = c(1, 1, 0), period = 12))
print(sarima_model)
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
library(tswge)
data("patemp")
plot(patemp, type = "o", main = "Average Monthly Temperature in PA", ylab = "Temperature (F)", xlab = "Time")
acf(patemp, main = "Sample Autocorrelation of patemp")
spec.pgram(patemp, spans = c(5, 5), taper = 0.1, log = "no", main = "Parzen Spectral Density Estimate")
burg_14 <- est.ar.wge(patemp, p = 14, method = "burg")
burg_16 <- est.ar.wge(patemp, p = 16, method = "burg")
burg_18 <- est.ar.wge(patemp, p = 18, method = "burg")
diff_12 <- diff(patemp, lag = 12)
plot(diff_12, type = "o", main = "Differenced (1 - B^12) Data", ylab = "Differenced Temperature", xlab = "Time")
acf(diff_12, main = "Sample Autocorrelation of Differenced Data")
spec.pgram(diff_12, spans = c(5, 5), taper = 0.1, log = "no", main = "Parzen Spectral Density Estimate of Differenced Data")
sarima_model <- arima(patemp, order = c(1, 0, 1), seasonal = list(order = c(1, 1, 0), period = 12))
print(sarima_model)
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
# SARIMA 모델 적합
sarima_model <- arima(patemp, order = c(1, 0, 1), seasonal = list(order = c(1, 1, 0), period = 12))
# 다음 2년 (24개월)의 온도 예측
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
# 예측 결과 플롯
time_index <- length(patemp) + 1:length(forecast_horizon)
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
# 마지막 12개월의 평균을 계산하여 다음 달의 예측값으로 사용
last_year_avg <- mean(tail(patemp, 12))
forecasted_values <- rep(last_year_avg, 24)
# 예측 결과 플롯
time_index <- length(patemp) + 1:24
plot(patemp, type = "o", xlim = c(1, length(patemp) + 24), ylim = range(c(patemp, forecasted_values)),
main = "Temperature Forecasts for Next 2 Years (Moving Average Method)", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasted_values, col = "blue", type = "o")
# Install required packages (if not already installed)
if(!require(forecast)) install.packages("forecast")
# Check for seasonality (12 months)
acf(patemp$temp, lag.max = 12)
# If seasonality is present, proceed with ARIMA model with differencing
if (any(abs(acf(patemp$temp, lag.max = 12)[1:12]) > 1.96 / sqrt(length(patemp$temp)))) {
# Differencing to remove trend and seasonality
dpatemp <- diff(patemp$temp, lags = 12)
# Check for stationarity after differencing
acf(dpatemp, lag.max = 12)
# Identify appropriate AR and MA parameters using AIC (try different values for p and q)
best_model <- auto.arima(dpatemp, stepwise = TRUE, ic = "aic", max.p = 10, max.q = 10)
# Include the (1-B^12) term in the model (seasonal differencing)
best_model$ar <- c(best_model$ar, 1)
# Forecast for the next 24 months (2 years)
forecast <- forecast(best_model, h = 24)
# Invert differencing to get the forecast for original data
forecast$forecast <- forecast$forecast + patemp$temp[tail(patemp, 12),]$temp
# Plot the forecast
plot(forecast)
# Print the forecast values
print(forecast)
} else {
# No seasonality detected, handle accordingly (e.g., simpler ARIMA model without differencing)
# ... (code for non-seasonal model)
}
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
?lines
length(time_index)
length(forcasts$pred)
forecast$pred
length(forecast$pred)
# SARIMA 모델을 사용하여 예측
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
View(forecast())
View(forecast)
# 예측 결과 플롯
time_index <- length(patemp) + 1:length(forecast_horizon)
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
lines(time_index, forecasts$pred - 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
legend("topright", legend = c("Observed", "Forecast", "95% Confidence Interval"), col = c("black", "blue", "red"), lty = c(1, 1, 2))
# 예측값 출력
cat("Forecasted temperatures for the next 2 years:\n", forecasts$pred, "\n")
cat("Forecasted temperatures for the next 2 years:\n", forecasts$pred, "\n")
time_index <- length(patemp)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
time_index <- length(patemp) + 1:length(forecast_horizon) +1
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
time_index <- 80
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
length(forecasts$pred)
time_index <- length(patemp) + 1:length(forecast$pred)
time_index <- length(patemp) + 24
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
lines(time_index, forecasts$pred - 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
length(patemp)
time_index <- length(patemp) + 20
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
time_index <- 20
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
time_index <- 24
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred[1], col = "blue", type = "o")
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast$pred)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred[0], col = "blue", type = "o")
lines(time_index, forecasts$pred[1], col = "blue", type = "o")
lines(length(time_index), forecasts$pred, col = "blue", type = "o")
forecasts$pred
lines(time_index, forecasts$pred[2], col = "blue", type = "o")
lines(time_index, forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[4], col = "blue", type = "o")
lines(time_index[1], forecasts$pred[4], col = "blue", type = "o")
lines(time_index, forecasts$pred, col = "blue", type = "o")
time_index
lines(time_index+1, forecasts$pred[4], col = "blue", type = "o")
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
points(time_index[i], forecasts$pred[i], col = "blue", pch = 19)  # 점으로 표시
}
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
lines(time_index[i], forecasts$pred[i], col = "blue", pch = 19)  # 점으로 표시
}
lines(time_index[i], forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
lines(time_index+i, forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
lines(time_index+i, forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
}
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
hist(artPval)
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(100000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
X<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Y<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
boxplot(Y~X)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
dim(Feature1)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
dim(COVID19)
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
hist(artPval)
length(artPval)
summary(artPval)
order(artPval)
head(artPval[order(artPval)])
View(data.frame(artPval[order(artPval)]))
which(artPval <= 0.05)
length(which(artPval <= 0.05))
WORK_DIR<-"C:\\Users\\taewoo\\Desktop\\lecture4_1\\dataMining\\240529"
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(F1='dk', F2, F3, F4, Group)
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data, 'f1','f2','f3','f4')
data.colnames('f1','f2','f3','f4')
?colname
?colnames
data.colnames('f1','f2','f3','f4',prefix = "col")
colnames('f1','f2','f3','f4',prefix = "col")
colnames(data) <- c("f1", "f2", "f3", "f4")
View(data)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4")
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4", "결과")
View(data)
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
data$특징1
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 ~ Group, fill = data$Group, data) # F3
boxplot(F4 ~ Group, fill = data$Group, data) # F4 second
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F3 ~ Group, fill = data$Group, data) # F3
Pval<-c()
Pval
for (i in 1:4){
Pval[i]<-t.test(data[,i]~Group, data)$p.value
}
Pval
data[,1]
data[1]
data[1,]
data[[1]]
class(Pval)
length(Pval)
colnames(data)
colnames(data)[1:2]
data.frame(colnames(data)[1:4], Pval) # 제일 작은 값이 관련이 높다.
Pval
data[,1] ## F1
data[,2] ## F2
data[,3] ## F3
data[,4] ## F4
data[,5] ## Group
temp <- rnorm(100000, 0, 1)
?rnorm
head(temp)
artPval <- temp[which(temp>0) ]
artPval
artPval <- artPval[which(artPval<1) ]
head(artPval)
hist(artPval)
length(artPval)
summary(artPval)
order(artPval) # 정렬
head(artPval)
?order
head(artPval[order(artPval)])
summary(artPval)
head(artPval[order(artPval, decreasing=TRUE)])
View(data.frame(artPval[order(artPval)]))
View(data.frame(artPval[order(artPval)], 'ㅇㅇ'))
View(data.frame(artPval[order(artPval)], colnames = 'dd'))
View(data.frame(Pval=artPval[order(artPval)]))
length(which(artPval <= 0.05)) # 해당 값 보다 작은 값이 유효한 featrue 라고 인식
boxplot(F1 +F2~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F1~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ ., fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 + F1 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
boxplot(F3 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
View(COVID19)
class(COVID19)
class(Feature1)
boxplot(Feature1 ~ COVID19)
?t.test
View(t.test)
glimpse(t.test)
summary(t.test)
t.test
t.test(Feature~COVID19)
t.test(Feature1~COVID19)
View(t.test(Feature1~COVID19))
View(t.test(Feature1~COVID19))$conf.int
View(t.test(Feature1~COVID19))$estimate
View(t.test(Feature1~COVID19))$p.value
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
t.test(Feature1 ~ COVID19)$estimate
t.test(Feature1 ~ COVID19)$eval
t.test(Feature1 ~ COVID19)$ev
t.test(Feature1 ~ COVID19)$p.value
# aov
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
?aov
Feature1
COVID19
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
View(aov(Feature1 ~ COVID19))[[1]]
aov(Feature1 ~ COVID19)[["fitted.values"]][[1]]
aov(Feature1 ~ COVID19)[[1]]
aov(Feature1 ~ COVID19)[1]
aov(Feature1 ~ COVID19)[1,2]
aov(Feature1 ~ COVID19)[1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[2]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,3]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,4]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,6]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,8]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,44]
length(summary(aov(Feature1 ~ COVID19))[[1]])
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,]
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,5]
length(summary(aov(Feature1 ~ COVID19))[[1]][1,])
length(summary(aov(Feature1 ~ COVID19))[[1]][1,5])
length(summary(aov(Feature1 ~ COVID19))[[2]])
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
