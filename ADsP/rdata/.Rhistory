lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
time_index <- 80
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
length(forecasts$pred)
time_index <- length(patemp) + 1:length(forecast$pred)
time_index <- length(patemp) + 24
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
lines(time_index, forecasts$pred - 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
length(patemp)
time_index <- length(patemp) + 20
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
time_index <- 20
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred + 1.96 * sqrt(forecasts$se^2), col = "red", lty = 2)
time_index <- 24
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred[1], col = "blue", type = "o")
forecast_horizon <- 24
forecasts <- predict(sarima_model, n.ahead = forecast_horizon)
time_index <- length(patemp) + 1:length(forecast$pred)
time_index <- length(patemp) + 1:length(forecast_horizon)
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
lines(time_index, forecasts$pred[0], col = "blue", type = "o")
lines(time_index, forecasts$pred[1], col = "blue", type = "o")
lines(length(time_index), forecasts$pred, col = "blue", type = "o")
forecasts$pred
lines(time_index, forecasts$pred[2], col = "blue", type = "o")
lines(time_index, forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[3], col = "blue", type = "o")
lines(time_index[2], forecasts$pred[4], col = "blue", type = "o")
lines(time_index[1], forecasts$pred[4], col = "blue", type = "o")
lines(time_index, forecasts$pred, col = "blue", type = "o")
time_index
lines(time_index+1, forecasts$pred[4], col = "blue", type = "o")
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
lines(time_index, forecasts$pred, col = "blue", type = "o")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
points(time_index[i], forecasts$pred[i], col = "blue", pch = 19)  # 점으로 표시
}
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
lines(time_index[i], forecasts$pred[i], col = "blue", pch = 19)  # 점으로 표시
}
lines(time_index[i], forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
lines(time_index+i, forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
# 예측 결과 플롯
plot(patemp, type = "o", xlim = c(1, length(patemp) + forecast_horizon), ylim = range(c(patemp, forecasts$pred)),
main = "Temperature Forecasts for Next 2 Years", ylab = "Temperature (F)", xlab = "Time")
# 예측값을 그래프로 표시
for (i in 1:length(forecasts$pred)) {
lines(time_index+i, forecasts$pred[i], col = "blue", type = "o")  # 점으로 표시
}
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
hist(artPval)
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(100000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
X<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Y<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
boxplot(Y~X)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
dim(Feature1)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
dim(COVID19)
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
hist(artPval)
length(artPval)
summary(artPval)
order(artPval)
head(artPval[order(artPval)])
View(data.frame(artPval[order(artPval)]))
which(artPval <= 0.05)
length(which(artPval <= 0.05))
WORK_DIR<-"C:\\Users\\taewoo\\Desktop\\lecture4_1\\dataMining\\240529"
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(F1='dk', F2, F3, F4, Group)
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data, 'f1','f2','f3','f4')
data.colnames('f1','f2','f3','f4')
?colname
?colnames
data.colnames('f1','f2','f3','f4',prefix = "col")
colnames('f1','f2','f3','f4',prefix = "col")
colnames(data) <- c("f1", "f2", "f3", "f4")
View(data)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4")
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4", "결과")
View(data)
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
data$특징1
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 ~ Group, fill = data$Group, data) # F3
boxplot(F4 ~ Group, fill = data$Group, data) # F4 second
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F3 ~ Group, fill = data$Group, data) # F3
Pval<-c()
Pval
for (i in 1:4){
Pval[i]<-t.test(data[,i]~Group, data)$p.value
}
Pval
data[,1]
data[1]
data[1,]
data[[1]]
class(Pval)
length(Pval)
colnames(data)
colnames(data)[1:2]
data.frame(colnames(data)[1:4], Pval) # 제일 작은 값이 관련이 높다.
Pval
data[,1] ## F1
data[,2] ## F2
data[,3] ## F3
data[,4] ## F4
data[,5] ## Group
temp <- rnorm(100000, 0, 1)
?rnorm
head(temp)
artPval <- temp[which(temp>0) ]
artPval
artPval <- artPval[which(artPval<1) ]
head(artPval)
hist(artPval)
length(artPval)
summary(artPval)
order(artPval) # 정렬
head(artPval)
?order
head(artPval[order(artPval)])
summary(artPval)
head(artPval[order(artPval, decreasing=TRUE)])
View(data.frame(artPval[order(artPval)]))
View(data.frame(artPval[order(artPval)], 'ㅇㅇ'))
View(data.frame(artPval[order(artPval)], colnames = 'dd'))
View(data.frame(Pval=artPval[order(artPval)]))
length(which(artPval <= 0.05)) # 해당 값 보다 작은 값이 유효한 featrue 라고 인식
boxplot(F1 +F2~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F1~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ ., fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 + F1 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
boxplot(F3 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
View(COVID19)
class(COVID19)
class(Feature1)
boxplot(Feature1 ~ COVID19)
?t.test
View(t.test)
glimpse(t.test)
summary(t.test)
t.test
t.test(Feature~COVID19)
t.test(Feature1~COVID19)
View(t.test(Feature1~COVID19))
View(t.test(Feature1~COVID19))$conf.int
View(t.test(Feature1~COVID19))$estimate
View(t.test(Feature1~COVID19))$p.value
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
t.test(Feature1 ~ COVID19)$estimate
t.test(Feature1 ~ COVID19)$eval
t.test(Feature1 ~ COVID19)$ev
t.test(Feature1 ~ COVID19)$p.value
# aov
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
?aov
Feature1
COVID19
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
View(aov(Feature1 ~ COVID19))[[1]]
aov(Feature1 ~ COVID19)[["fitted.values"]][[1]]
aov(Feature1 ~ COVID19)[[1]]
aov(Feature1 ~ COVID19)[1]
aov(Feature1 ~ COVID19)[1,2]
aov(Feature1 ~ COVID19)[1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[2]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,3]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,4]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,6]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,8]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,44]
length(summary(aov(Feature1 ~ COVID19))[[1]])
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,]
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,5]
length(summary(aov(Feature1 ~ COVID19))[[1]][1,])
length(summary(aov(Feature1 ~ COVID19))[[1]][1,5])
length(summary(aov(Feature1 ~ COVID19))[[2]])
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
score
library(reshape)
library(reshape2)
score
score <- data.frame(c(student_number = 1,2,1,2))
score
score <- data.frame(student_number = c(1,2,1,2))
score
score <- data.frame(student_number = c(1,2,1,2), semester = c(1,1,2,2), math_score = c(60,90,70,90)
english_score = c(80,70,40,60))
score <- data.frame(student_number = c(1,2,1,2), semester = c(1,1,2,2), math_score = c(60,90,70,90),
english_score = c(80,70,40,60))
score
melt(score, id = c("student_number", "semester"))
melted_score <- melt(score, student_number ~ variable, mean)
melted_score <- melt(score, id = c("student_number", "semester"))
melted_Score
melted_score
cast (melted_score ,student_number ~ variable, mean)
library(reshape2)
cast (melted_score ,student_number ~ variable, mean)
install.packages(reshape)
setRepositories(ind = 1:8)
install.packages(reshape)
install.packages("reshape")
#install.packages("reshape")
library(reshape)
cast (melted_score ,student_number ~ variable, mean)
# 학생의 학기별 평균 점수
cast(melted_score, student_number+semester ~ variable, mean )
# 학생의 학기별 평균 점수
cast(melted_score, student_number ~ variable, mean )
# 학생의 학기별 평균 점수
cast(melted_score, student_number ~ semester, mean )
# 학생의 과목별 최댓값
cast(melted_score, student_number ~ variable, max)
save.imareshape2save.image("Day8.Rdata")
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
save.imareshape2save.image("Day8.Rdata")
save.image("Day8.Rdata")
library(sqldf)
install.packages("sqldf")
#install.packages("sqldf")
library(sqldf)
sqldf('select * from score')
sqldf('select * from score where student_number = 1')
sqldf('select avg(math_score), avg(english_score) from score group by student_number')
sqldf('select avg(math_score), avg(english_score) from score group by student_numbers')
sqldf('select avg(math_score), avg(english_score) from score group by student_number')
save.image("Day8.Rdata")
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
load("Day8_1.Rdata")
save.image("Day8_1.Rdata")
score <- data.frame(class = c('A', 'A', 'B', 'B'), math = c(50, 70, 60, 90),
english = c(70,80,60,80))
library(plyr)
score
levels(score$class)
ddply(score, 'class', summarise, math_avg = mean(math), ang_avg = mean(english))
# 데이터 확장용 transform 사용
ddply(score, 'class', transform, math_avg = mean(math), eng_avg = mean(english))
data
data <- data.frame(year = c(rep(2012,4), rep(2013,4)), month = c(1,1,2,2,1,1,2,2),
value = (c(3,5,7,9,1,5,4,6)))
data
# 2개 이상의 기준 변수를 두는 경우
ddply(data, c("year", "month"), summarise, value_avg = mean(value))
data.frame(avg_sd = value_avg / value_sd)
#원하는 임의의 함수를 작성해서 사용한 경우
ddply(data, c("year", "month"), function(x){
value_avg = mean(x$value)
value_sd = mena(sd(x$value))
data.frame(avg_sd = value_avg / value_sd)
})
#원하는 임의의 함수를 작성해서 사용한 경우
ddply(data, c("year", "month"), function(x){
value_avg = mean(x$value)
value_sd = mean(sd(x$value))
data.frame(avg_sd = value_avg / value_sd)
})
#원하는 임의의 함수를 작성해서 사용한 경우
ddply(data, c("year", "month"), function(x){
value_avg = mean(x$value)
value_sd = sd(x$value)
data.frame(avg_sd = value_avg / value_sd)
})
# 5. ------- data.table 패키지, 검색 능력 향상 ---------
year <- rep(c(2012:2015), each = 12000000)
year
month <- rep( rep(c(1:12), each = 1000000), 4)
month <- rep( rep(c(1:12), each = 1000000), 4)
value <- runif(48000000)
save.image("Day8_1.Rdata")
DataFrame <- data.frame(year, month, value)
DataFrame
?runif
DataTable <- as.data.table(DataFrame)
library('data.table')
DataTable <- as.data.table(DataFrame)
system.time(DataFrame[DataFrame$year == 2012,])
# 데이터 테이블의 검색 시간 측정
system.time(DataTable[DataTable$year == 2012,])
# 키 값으로 설정된 칼럼, 표현식 이용한 검색시간 측정정
setkey(DataTable, year)
tail(DataTable)
system.time(DataTable[J(2012)])
?J
save.image("Day8_1.Rdata")
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
load("Day8_2.Rdata")
save.image("Day8_2.Rdata")
load("Day8_2.Rdata")
head(iris,3)
# 기초통계량
summarise(iris)
# 기초통계량
summary(iris)
# 데이터 구조 파악
str(iris)
save.image("Day8_2.Rdata")
copy_iris <- iris
dim(copy_iris)
copy_iris[sample(1:150, 30), 1] <- NA # 30개의 결측값 생성
copy_iris <- copy_iris[complete.cases(copy_iris),]
dim(copy_iris)
View(copy_iris)
View(iris)
copy_iris <- iris
dim(copy_iris)
copy_iris[sample(1:150, 30), 1] <- NA # 30개의 결측값 생성
dim(copy_iris)
copy_iris
View(iris)
copy_iris <- copy_iris[complete.cases(copy_iris),]
sample(1:150)
sample(1:150, 30)
copy_iris[sample(1:150, 30), 1] <- NA
meanValue <- mean(copy_iris$Sepal.Length, na.rm = T)
meanValue
meanValue <- mean(copy_iris$Sepal.Length, na.rm = F) # 결측값 제외 평균 계산
meanValue
copy_iris$Sepal.Length[is.na(copy_iris$Sepal.Length)] <- MeanValue
copy_iris$Sepal.Length[is.na(copy_iris$Sepal.Length)] <- meanValue
copy_iris
# 평균 대치법
copy_iris <- iris
copy_iris[sample(1:150, 30), 1] <- NA
meanValue <- mean(copy_iris$Sepal.Length, na.rm = T) # 결측값 제외 평균 계산
copy_iris$Sepal.Length[is.na(copy_iris$Sepal.Length)] <- meanValue
copy_iris
# centrallImputation을 활용한 중앙값 대치
library(DMwR2)
# centrallImputation을 활용한 중앙값 대치
install.packages('DMwR2')
library(DMwR2)
# centrallImputation을 활용한 중앙값 대치
# install.packages('DMwR2')
library(DMwR2)
copy_iris[sample(1:150, 30), 1] <- NA
cpy_iris <- centralImputation(copy_iris)
cpy_iris
# 테스트를 위한 결측값을 가진 iris 데이터 생성
copy_iris <- iris
copy_iris[sample(1:150, 30), 1]
iris
copy_iris[sample(1:150, 30), 1] <- NA
copy_iris <- knnImputation(cpy_iris, k=10)
copy_iris <- knnImputation(copy_iris, k=10)
copy_iris
copy_iris <- knnImputation(copy_iris, k=10)
# 테스트를 위한 결측값을 가진 iris 데이터 생성
copy_iris <- iris
copy_iris[sample(1:150, 30), 1] <- NA
copy_iris <- knnImputation(copy_iris, k=10)
copy_iris
copy_iris[sample(1:150, 30), 1] <-NA
library(Amelia)
install.packages("Amelia")
#install.packages("Amelia")
library(Amelia)
iris_imp <- amelia(copy_iris, m=3, cs="Species")
copy_iris$Sepal.Length <- iris_imp$imputations[[3]]$Sepal.Length
copy_iris$Sepal.Length
iris_imp
# 8. ----- 이상값 판단. ------
data<-c(3,10,13,16,11,20,17,25,43)
boxplot(data)
boxplot(data, horizontal = T)
save.image("Day8_2.Rdata")
iris_tmp
iris_imp
iris_imp[[3]]
copy_iris
