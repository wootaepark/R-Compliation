}
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
hist(artPval)
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(10000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
temp <- rnorm(100000, 0, 1)
artPval <- temp[which(temp>0) ]
artPval <- artPval[which(artPval<1) ]
hist(artPval)
X<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Y<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
boxplot(Y~X)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
dim(Feature1)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal"), 30))
dim(COVID19)
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
dim(COVID19)
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
data <- data.frame(Y,X)
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
hist(artPval)
length(artPval)
summary(artPval)
order(artPval)
head(artPval[order(artPval)])
View(data.frame(artPval[order(artPval)]))
which(artPval <= 0.05)
length(which(artPval <= 0.05))
WORK_DIR<-"C:\\Users\\taewoo\\Desktop\\lecture4_1\\dataMining\\240529"
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(F1='dk', F2, F3, F4, Group)
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data, 'f1','f2','f3','f4')
data.colnames('f1','f2','f3','f4')
?colname
?colnames
data.colnames('f1','f2','f3','f4',prefix = "col")
colnames('f1','f2','f3','f4',prefix = "col")
colnames(data) <- c("f1", "f2", "f3", "f4")
View(data)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4")
View(data)
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(특징1, 특징2, 특징3, 특징4, 결과)
data<-data.frame(F1, F2, F3, F4, Group)
colnames(data) <- c("특징1", "특징2", "특징3", "특징4", "결과")
View(data)
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
data$특징1
F1 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 10, sd = 2))
F2 <- c(rnorm(50, mean = 10, sd = 2), rnorm(50, mean = 4, sd = 2))
F3 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 10, sd = 4))
F4 <- c(rnorm(50, mean = 10, sd = 4), rnorm(50, mean = 4, sd = 4))
Group <- factor(c(rep("Cancer", 50), rep("Normal", 50)))
data<-data.frame(F1, F2, F3, F4, Group)
View(data)
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 ~ Group, fill = data$Group, data) # F3
boxplot(F4 ~ Group, fill = data$Group, data) # F4 second
boxplot(F1 ~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F3 ~ Group, fill = data$Group, data) # F3
Pval<-c()
Pval
for (i in 1:4){
Pval[i]<-t.test(data[,i]~Group, data)$p.value
}
Pval
data[,1]
data[1]
data[1,]
data[[1]]
class(Pval)
length(Pval)
colnames(data)
colnames(data)[1:2]
data.frame(colnames(data)[1:4], Pval) # 제일 작은 값이 관련이 높다.
Pval
data[,1] ## F1
data[,2] ## F2
data[,3] ## F3
data[,4] ## F4
data[,5] ## Group
temp <- rnorm(100000, 0, 1)
?rnorm
head(temp)
artPval <- temp[which(temp>0) ]
artPval
artPval <- artPval[which(artPval<1) ]
head(artPval)
hist(artPval)
length(artPval)
summary(artPval)
order(artPval) # 정렬
head(artPval)
?order
head(artPval[order(artPval)])
summary(artPval)
head(artPval[order(artPval, decreasing=TRUE)])
View(data.frame(artPval[order(artPval)]))
View(data.frame(artPval[order(artPval)], 'ㅇㅇ'))
View(data.frame(artPval[order(artPval)], colnames = 'dd'))
View(data.frame(Pval=artPval[order(artPval)]))
length(which(artPval <= 0.05)) # 해당 값 보다 작은 값이 유효한 featrue 라고 인식
boxplot(F1 +F2~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F1~ Group, fill = data$Group, data) # F1의 경우는 의미가 없다.
boxplot(F2 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ ., fill = data$Group, data) # F2 Best
boxplot(F2 + F4 ~ Group, fill = data$Group, data) # F2 Best
boxplot(F3 + F1 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
boxplot(F3 ~ Group, fill = data$Group, data) # F3 , F1의 경우와 비슷
COVID19<-factor(c(rep("COVID-19", 30), rep("Normal", 30)))
Feature1<-c(rnorm(30, mean=0, sd=2), rnorm(30, mean=10 ,sd=2))
View(COVID19)
class(COVID19)
class(Feature1)
boxplot(Feature1 ~ COVID19)
?t.test
View(t.test)
glimpse(t.test)
summary(t.test)
t.test
t.test(Feature~COVID19)
t.test(Feature1~COVID19)
View(t.test(Feature1~COVID19))
View(t.test(Feature1~COVID19))$conf.int
View(t.test(Feature1~COVID19))$estimate
View(t.test(Feature1~COVID19))$p.value
boxplot(Feature1 ~ COVID19)
t.test(Feature1 ~ COVID19)$p.value
t.test(Feature1 ~ COVID19)$estimate
t.test(Feature1 ~ COVID19)$eval
t.test(Feature1 ~ COVID19)$ev
t.test(Feature1 ~ COVID19)$p.value
# aov
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
?aov
Feature1
COVID19
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
View(aov(Feature1 ~ COVID19))[[1]]
aov(Feature1 ~ COVID19)[["fitted.values"]][[1]]
aov(Feature1 ~ COVID19)[[1]]
aov(Feature1 ~ COVID19)[1]
aov(Feature1 ~ COVID19)[1,2]
aov(Feature1 ~ COVID19)[1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[2]]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,1]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,2]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,3]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,4]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,6]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,8]
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,44]
length(summary(aov(Feature1 ~ COVID19))[[1]])
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,]
length(summary(aov(Feature1 ~ COVID19))[[1]])[1,5]
length(summary(aov(Feature1 ~ COVID19))[[1]][1,])
length(summary(aov(Feature1 ~ COVID19))[[1]][1,5])
length(summary(aov(Feature1 ~ COVID19))[[2]])
anova(lm(Feature1 ~ COVID19))
# aov ==> ANOVA 분석
summary(aov(Feature1 ~ COVID19))[[1]][1,5]
anova(lm(Feature1 ~ COVID19))
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
load("Day7.Rdata")
class('abc')
class(Inf) #
class(3.0) # numeric
class(D3.0) # numeric
class(3.0) # numeric
true
class(true) # logical
class(TRUE) # logical
sqrt(-3)
class(NA) # logical
class(NULL)
is.na(logical)
is.na(logical)
logical <- NA
is.na(logical)
5/8
5%/%8 # 나눗셈의 몫
5 %% 8 # 나눗셈의 나머지
8%/%5 # 나눗셈의 몫
8 %% 5 # 나눗셈의 나머지
exp(8)
exp(2()
exp(2)
exp(2)
2^2
2**2 # 4 (위와 동일)
exp()
exp(0)
exp(1)
exp(3) # e^3 (자연상수 의 3승)
v1 <- c(3, TRUE, FALSE) # 다른 데이터 형 가능
v1
v1 <- c(3, TRUE, FALSE, 'hello') # 다른 데이터 형 가능
v1
class v1
class(v1)
v2 <- c(1:6)
v1
v2
m1 <- matrix(c(1:6), nrow = 2)
m1
m1 <- matrix(c(1:6),nrow = 4 # 1 부터 6까지의 수를 2개의 row 에 나눈다.
m1 <- matrix(c(1:6),nrow = 4) # 1 부터 6까지의 수를 2개의 row 에 나눈다.
m1 <- matrix(c(1:6),nrow = 4) # 1 부터 6까지의 수를 2개의 row 에 나눈다.
m1 <- matrix(c(1:6),nrow = 5) # 1 부터 6까지의 수를 2개의 row 에 나눈다.
m1 <- matrix(c(1:6),nrow = 6) # 1 부터 6까지의 수를 2개의 row 에 나눈다.
m1
m1 <- matrix(c(1:6),nrow = 5) # 1 부터 6까지의 수를 2개의 row 에 나눈다. (나누어 떨어지지 않는 경우 경고)
m1
m2 <- matrix(c(1:6), ncol = 2)
m2
m3 <- matrix(c(1:6), nrow = 2, byrow = T)
m3
v3 <- c(1:6)
v3
dim(v3)
dim(v3)
dim(v3) <- c(2, 3)
v3
dim(v3)
a1 <- array(c(1:12))
a1
dim(a1)
a1 <- array(c(1:12), dim = c(2,3,2))
dim(a1)
a1
a1 <- array(c(1:12), dim = c(2,3,3))
a1
dim(a2)<- c(2,3,2)
# 또는 아래와 같이 배열 만들 수 있다.
a2 <- array(c(1:12))
dim(a2)<- c(2,3,2)
a2
L <- list()
L[[1]] <- 5
L
L[[2]] <- c(1:6)
L
View(L)
L[[1,1]]
L[1]
L[2]
L[[3]] <- matrix (c(1:6), nrow = 2)
L[[4]] <- array( c(1:12), dim = c(2,3,2))
L
L[[4,1]]
L[[4][1]]
L[[4,1]]
v_1 <- c(1:3)
v_2 <- c('a', 'b', 'c')
df1 <- data.frame(v1, v2)
df1 <- data.frame(v_1, v_2)
df1
View(df1)
v_2 <- c('a', 'b', 'c','d')
df1 <- data.frame(v_1, v_2)
save.image("Day7.Rdata")
paste('this is ', 'a pen')
seq(1, 10, 2)
(1, 10, by = 2)
seq(1, 10, by = 2)
rep(1,5)
rep(1,5,3)
rep(1,5,3,44)
rep(1,5,44,4)
a<-1
a
rm(a)
a
ls()
median(c(1:9))
median(c(1:10))
summary(c(1:10))
save.image("Day7.Rdata")
load("Day7.Rdata")
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
save.image("Day7_1.Rdata")
m1 <- matrix(c(1:6), nrow = 2)
colnames(m1) <- c('c1','c2','c3')
m1
rownames(m1) <- c(r1,r2)
rownames(m1) <- c('r1','r2','r3')
rownames(m1) <- c('r1','r2')
m1
colnames(m1)
rownames(m1)
df1 <- data.frame(x=c(1:3), y=c(4:6))
df1
rownames(df1) <- c('r1', 'r2', 'r3')
colnames(df1) <- c('c1, c2')
rownames(df1) <- c('r1', 'r2', 'r3')
df1
colnames(df1) <- c('c1, c2')
rownames(df1) <- c('r1', 'r2', 'r3')
df1
df1 <- data.frame(x=c(1:3), y=c(4:6))
colnames(df1) <- c('c1, c2')
rownames(df1) <- c('r1', 'r2', 'r3')
df1
df1 <- data.frame(x=c(1:3), y=c(4:6))
colnames(df1) <- c('c1', 'c2')
rownames(df1) <- c('r1', 'r2', 'r3')
df1
m1[,'c1']
m1[,'c1']
df1
df[,'c1']
df1$c1
df1[1,]
df1[,1]
v1 <- c(1:3)
v2 <- c(4:6)
rbind(v1,v2)
cbind(v1,v2) # col 방향 결합
data <- c('a', 'b', 'c')
print(i)
for (i in data){
print(i)
}
i <- 0
while(i<5){
print(i)
i<-i+1
}
comparedTo5 <- function(number){
if(number < 5){
print('number 는 5보다 작다.')
}
else if (number > 5){
print('number 는 5보다 크다.')
}
else{
print('number 는 5와 같다.')
}
}
comparedTo5(10)
strData<- 'this is a pen'
strData<- 'This is a pen'
tolower(strData)
toupper(strData)
nchar(strData)
substr(strData, 9, 13)
strsplit(strData, 'is') # is 기준으로 좌우로 쪼갠다.
grepl('pen', strData) # 주어진 문자가 존재하는지
gsub('pen', 'banana', strData) # 다른 문자로 대체
v3 <- c(1:9)
length(v3)
cov(v3)
v4 <- c(11:19)
cov(v3, v4)
cor(v3, v4)
order(v3)
order(v4)
table(v3)
v3 <- c(1,1,2,2,3,3,4,4,5)
v4 <- c(11:19)
length(v3)
cov(v3, v4) # 공분산
cor(v3, v4) # 상관계수
order(v4) # 단순한 순서
table(v3) # 각 수치의 개수
order(v3) # 단순한 순서
x<-c(1:12)
save.image("Day7_1.Rdata")
head(x)
head(x,5)
tail(x,5)
quantile(x)
save.image("Day7_1.Rdata")
load("Day7_1.Rdata")
load("Day7_1.Rdata")
load("Day7_2.Rdata")
setRepositories(ind = 1:8)
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
save("Day7_2.Rdata")
WORK_DIR <- "C:\\DataScience_R_Compliation\\ADsP\\rdata"
setwd(WORK_DIR)
save("Day7_2.Rdata")
save.image("Day7_2.Rdata")
load("Day7_2.Rdata")
df1 <- data.frame( x = c(1,1,1,2,2), y=c(2,3,4,3,3))
df2 <- data.frame( x = c(1,2,3,4), y = c(5,6,7,8))
subset(df1, x == 1)
merge(df1, df2, by=c('x'))
merge(df1, df2, by=c('z')) # 두 데이터를 특정 공통된 열 기준으로 병합
merge(df1, df2, by=c('y')) # 두 데이터를 특정 공통된 열 기준으로 병합
merge(df1, df2, by=c('y')) # 두 데이터를 특정 공통된 열 기준으로 병합
merge(df1, df2, by=c('x')) # 두 데이터를 특정 공통된 열 기준으로 병합
merge(df1, df2, z=c('x')) # 두 데이터를 특정 공통된 열 기준으로 병합
apply(df1, 1, sum)
apply(df1, 2, sum)# 2는 각 열에 함수를 적용용
Sys.Date()
Sys.time()
as.Date("2024/07/05")
format(Sys.Date(), '%Y/%m/%d')
format(Sys.Date(), '%Y/%m//%d')
format(Sys.Date(), '%A') # 요일추출
unclass(Sys.time())
as.POSIXct(1720184262, origin = '1970-01-01')
as.POSIXct(1720184262, origin = '10-01-01')
as.POSIXct(1720184262, origin = '10000-01-01')
as.POSIXct(1720184262, origin = '2024-01-01')
x <- c(1:10)
save.image("Day7_2.Rdata")
y <- rnorm(10)
y <- rnorm(10)
length(y)
plot(x,y)
plot(x,y, type = '1')
plot(x,y, type = 'l')
plot(x,y, type = 'b')
plot(x,y, type = 'n')
plot(x,y, type = 'b')
plot(x,y, type = 'p')
plot(x,y, type = 'l')
plot(x,y, type = 'l', xlim = -2)
plot(x,y, type = 'l', xlim = -2 : 10)
plot(x,y, type = 'l', xlim = c(-2, 12))
plot(x,y, type = 'l', xlim = c(-2, 12), ylim = c(-3, 3))
plot(x,y, type = 'l', xlim = c(-2, 12), ylim = c(-3, 3), xlab = 'X axis')
plot(x,y, type = 'l', xlim = c(-2, 12), ylim = c(-3, 3), xlab = 'X axis',
ylab = 'Y axis')
plot(x,y, type = 'l', xlim = c(-2, 12), ylim = c(-3, 3), xlab = 'X axis',
ylab = 'Y axis', main = 'Test plot')
abline(v = c(1,10))
# 위의 그래프에서 선을 그려주는 역할 (그래프 없으면 코드 실행 불가)
abline(v = c(1,10), col = 'pink')
# 위의 그래프에서 선을 그려주는 역할 (그래프 없으면 코드 실행 불가)
abline(v = c(1,10), col = 'blue')
save.image("Day7_2.Rdata")
